<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerPerson</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oPerson</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attributes

event_inherited();

image_speed = 0.1;

firingDelay = 0;
firingDelayMax = 10;

speedWalk = 6; //6.25
speedJump = 9; //9.5
speedSlow = 1;
fallSpeed = 2;

imageFast = 0.2;
imageSlow = 0.05;

jumpCount = 0;
ySpeed = 0;
xSpeed = 0;


bumpOffset = 8;
otherSpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls

// Collision

// Checks where the player will be next step, given their falling speed and acceleration, and if they will be inside a wall below them then they are placed on top of the wall instead.
if collision_point( x + sprite_width/2, y + sprite_height + ySpeed, oWall, false, true ) and ySpeed &gt; 0
{
    y += (y + sprite_height)%64;
    // If the player just hit the ground this step, then play the landing sound effect.
    if jumpCount == 1
    {
        sprite_index = sPlayerPerson; audio_play_sound(sndLand, 10, false);
        jumpCount = 0;
    }
}
// Checks if the player is inside a wall below them on this step. If they are, then they are placed on top of the wall instead.
if collision_point( x + sprite_width/2, y + sprite_height, oWall, false, true )
{
    y -= (y + sprite_height)%64;
}

// If the player is hit by a floozle, then they are bounced around.
if place_meeting(x, y, oFloozle )
{
    if keyboard_check(vk_down)
    {
        ySpeed = 0;
    }
    else if keyboard_check(vk_up) or keyboard_check('Z')
    {
        ySpeed = -20;
    }
    else
    {
        ySpeed = -10;
    }
    audio_play_sound (sndHurt, 1, false);
    if keyboard_check(vk_left)
    {
        xSpeed = -10;
    }
    else if keyboard_check(vk_right)
    {
        xSpeed = 10;
    }
    else if otherSpeed &lt; 0
    {
        xSpeed = -10;
    }
    else if otherSpeed &gt; 0
    {
        xSpeed = 10;
    }
}

// If the player has ground beneath their feet, then they can use controls.
else if collision_line ( x + sprite_width/2, y + sprite_height + 1, x + sprite_width/2, y + sprite_height + 1, oWall, false, true )
{
    // Jump
    // If the pleyer presses Up then they start moving upwards
    if keyboard_check_pressed(vk_up) or keyboard_check_pressed(ord('Z'))
    {
        ySpeed = -18;
        jumpCount = 1;
    
        // If the player is pressing Left or Right when they jump, then their horizontal velocity is set to match the direction they're pressing.
        if keyboard_check(vk_left) and !collision_line( x - speedWalk, y + sprite_height/2, x - speedWalk, y + sprite_height*2, oWall, false, true )
        {
            xSpeed = -speedJump;
            sprite_index = sPlayerPerson; audio_play_sound(sndJumpFar, 1, false);
        }
        else if keyboard_check(vk_right) and !collision_line( x + sprite_width + speedWalk, y + sprite_height/2, x + sprite_width + speedWalk, y + sprite_height*2, oWall, false, true )
        {
            xSpeed = speedJump;
            audio_play_sound(sndJumpFar, 1, false);
        }
        else
        {
            sprite_index = sPlayerPerson; audio_play_sound(sndJump5, 1, false);
        }
    }
    
    // Move left
    // If the player is pressing Left then they move left
    // else if keyboard_check(vk_left) and !collision_rectangle( x - speedWalk, y + (sprite_height/2), x - speedWalk, y + (sprite_height/2), oWall, false, true )
    else if keyboard_check(vk_left) and !collision_line( x, y + sprite_height/2, x - speedWalk, y + sprite_height/2, oWall, false, true )
    {
        xSpeed = -speedWalk;
        ySpeed = 0;
        // Change the animation and speed it up
        sprite_index = sPlayerPerson; image_speed = imageFast; 
    }
    
    // Move Right
    // If the player is pressing Right then they move right
    else if keyboard_check(vk_right) and !collision_rectangle( x + sprite_width, y + sprite_height/2, x +sprite_width + speedWalk, y + sprite_height/2, oWall, false, true )
    {
        xSpeed = +speedWalk;
        ySpeed = 0;
        // Change the animation and speed it up
        sprite_index = sPlayerPerson; image_speed = imageFast; 
    }
    
    // If the player presses nothing then they stay still.
    else
    {
        ySpeed = 0;
        xSpeed = 0;
        // Change the animation to the idle animation at a slow speed.
        sprite_index = sPlayerPerson;
        image_speed = 0.1;
    }
    
    // If the player is near an edge they crouch.
    if  (   !collision_line(x - speedWalk,                 y + sprite_height/2, x - speedWalk,                y + sprite_height*2, oWall, false, true ) or
            !collision_line(x + sprite_width + speedWalk,  y + sprite_height/2, x + sprite_width + speedWalk, y + sprite_height*2, oWall, false, true ) ) and 
            collision_point ( x + sprite_width/2, y + sprite_height, oWall, false, true )
    {
        sprite_index = sPlayerPersonCrouch;
    }

}

// If the player does not have any ground under their feet then they start falling
else if (ySpeed &lt; 20)
{
    ySpeed += fallSpeed;
    jumpCount = 1;
    
    //This code causes a weird minor bug where the animation only plays 1 frame because the image index set earlier in the if statement (sPlayerPersonWalkUp) only has 1 frame. Creating a secondframe, identical to the first, in sPlayerPersonWalkUp solves this problem, but seems a bit hacky.
    if xSpeed == speedJump or xSpeed == -speedJump
    {
        sprite_index = sPlayerPersonJumpCrouch;
        image_speed = imageFast;
    }
    else
    {
        // Change the animation to the falling animation and speed it up
        sprite_index = sPlayerPerson; image_speed = imageFast;
    }
    if ySpeed == 20
    {
        sprite_index = sPlayerPersonFall; audio_play_sound (sndFall, 1, false);
        //xSpeed = 6.25;
    }
}    

// Checks to the sides of the player for a wall. If it finds one, the player's horizontal direciton is reversed and lowered.
if collision_line( x + sprite_width/2, y + sprite_height - sprite_height/4, x + sprite_width/2 + xSpeed * 2, y + sprite_height - sprite_height/4, oWall, false, true )
{
    xSpeed = -xSpeed / 2
    ySpeed = 0;
    audio_play_sound(sndBump, 10, false);
}

// Once the player's input and falling status are determined, move the player horizontally and vertically a distance equal to the player's velocity.
x += xSpeed;
y += ySpeed;

// Shoot
if global.haveGun == true
{
    if !instance_exists(oGun)
    {
        instance_create(x, y, oGun);
    }
    if keyboard_check_pressed(ord('X'))
    {
        if (firingDelay &gt; 0)
        {
            firingDelay -= 1;
        }
        else
        {
            instance_create (x + 11, y + 3, oPlayerShot);
            firingDelay = firingDelayMax;
        }
    }
    else
    {
        firingDelay = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oFloozle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>otherSpeed = other.hspeed;
floor(otherSpeed);
audio_play_sound(sndExplosion, 10, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>6,6</point>
  </PhysicsShapePoints>
</object>
