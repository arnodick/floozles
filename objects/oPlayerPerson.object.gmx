<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerPerson</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sPlayerPerson</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attributes

vspeed = 2;
image_speed = 0.1;

firingDelay = 0;
firingDelayMax = 10;
bumpDelay = 0;
bumpDelayMax = 4;

speedWalk = 6;
speedJump = 10;
speedSlow = 1;

imageFast = 0.3;

jumpCount = 0;
ySpeed = 0;
xSpeed = 0;

fallSpeed = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls

// Collision
// Checks where the player will be next step, given their falling speed and acceleration, and if they will be inside a wall then they are placed on top of the wall instead.
if collision_rectangle( x, y + sprite_height, x + sprite_width, y + sprite_height + ySpeed + fallSpeed, oWall, false, true )
{
    y += ((y + sprite_height)%32);
    // If the player just hit the ground this step, then play the landing sound effect.
    if jumpCount == 1
    {
        audio_play_sound(sndLand, 10, false);
        jumpCount = 0;
    }
}
// Checks if the player is inside a wall on this step. If they are, then they are placed on top of the wall instead.
if collision_rectangle( x, y + sprite_height, x + sprite_width, y + sprite_height, oWall, false, true )
{
    y -= ((y + sprite_height)%32);
}

// If the player has ground beneath their feet, then they can use controls.
if collision_rectangle( x, y + sprite_height + 1, x + sprite_width, y + sprite_height + 1, oWall, false, true )
{
    // Jump
    // If the pleyer presses Up then they start moving upwards
    if keyboard_check_pressed(vk_up)
    {
        ySpeed = -18;
        jumpCount = 1;
        audio_play_sound(sndJump5, 1, false);
    
        // If the player is pressing Left or Right when they jump, then their horizontal velocity is set to match the direction they're pressing.
        if keyboard_check(vk_left) and !collision_rectangle( x, y, x, y + sprite_height, oWall, false, true )
            xSpeed = -speedJump;
        else if keyboard_check(vk_right) and !collision_rectangle( x + sprite_width, y, x + sprite_width, y + sprite_height, oWall, false, true )
            xSpeed = speedJump;
    }
    
    // Move left
    // If the player is pressing Left then they move left
    else if keyboard_check(vk_left) and !collision_rectangle( x, y + (sprite_height/2), x, y + (sprite_height/2), oWall, false, true )
    {
        xSpeed = -speedWalk;
        ySpeed = 0;
        // Change the animation and speed it up
        sprite_index = sPlayerPersonWalkLeft;
        image_speed = imageFast; 
    }
    
    // Move Right
    // If the player is pressing Right then they move right
    else if keyboard_check(vk_right) and !collision_rectangle( x + sprite_width, y + (sprite_height/2), x + sprite_width, y + (sprite_height/2), oWall, false, true )
    {
        xSpeed = +speedWalk;
        ySpeed = 0;
        // Change the animation and speed it up
        sprite_index = sPlayerPersonWalkRight;
        image_speed = imageFast; 
    }
    
    // If the player presses nothing then they stay still.
    else
    {
        ySpeed = 0;
        xSpeed = 0;
        // Change the animation to the idle animation at a slow speed.
        sprite_index = sPlayerPerson;
        image_speed = 0.1;
    }

}

// If the player does not have any ground under their feet then they start falling
else if (ySpeed &lt; 16)
{
    ySpeed += fallSpeed;
    jumpCount = 1;
    
    // Change the animation to the falling animation and speed it up
    sprite_index = sPlayerPersonWalkUp;
    image_speed = imageFast;
    
    if place_meeting(x - xSpeed, y, oWall )
    {
        x = other.x + 1;
        xSpeed = speedSlow
        ySpeed = 0;
    }
    if place_meeting(x + xSpeed, y, oWall )
    {
        x = other.x - 1;
        xSpeed = -speedSlow
        ySpeed = 0;
    }
}

// Once the player's input and falling status are determined, move the player horizontally and vertically a distance equal to the player's velocity.
x += xSpeed;
y += ySpeed;

// Shoot
if keyboard_check_pressed(ord('X'))
{
    if (firingDelay &gt; 0)
    {
        firingDelay -= 1;
    }
    else
    {
        instance_create (x + 11, y + 3, oPlayerShot);
        firingDelay = firingDelayMax;
    }
}
else
{
    firingDelay = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>6,6</point>
  </PhysicsShapePoints>
</object>
