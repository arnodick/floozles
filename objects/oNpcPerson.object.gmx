<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sNpcPerson</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oPerson</parentName>
  <maskName>sNpcPerson</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NPC Atrributes

vspeed = 2;
image_speed = 0.1;
imageFast = 0.2;

speedWalk = irandom(12) - 6;

fallSpeed = 2;

bumpOffset = 8;

ySpeed = 0;
xSpeed = speedWalk;

otherSpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NPC Controller

// Collision

// Checks to the sides of the player to see if they will be inside a wall on this step or next step. If so they are placed to the right of the wall.
if collision_line( x + sprite_width/2, y, x + sprite_width/2, y + sprite_height/2 + sprite_height/4, oWall, false, true ) or collision_line( x + sprite_width/2 + xSpeed, y, x + sprite_width/2 + xSpeed, y + sprite_height/2 + sprite_height/4, oWall, false, true )
{
    x = other.x + bumpOffset;
    xSpeed = 4;
    ySpeed = 0;
    //audio_play_sound(sndBump, 10, false);
}
// Second check to make sure player wasn't moved further inside a wall by the last block of code. If so, they are moved to the left of the wall.
if collision_line( x + sprite_width/2, y, x + sprite_width/2, y + sprite_height/2 + sprite_height/4, oWall, false, true )
{
    x = other.x - bumpOffset - sprite_width/2;
    xSpeed = -4;
    ySpeed = 0;
}

// Checks where the player will be next step, given their falling speed and acceleration, and if they will be inside a wall below them then they are placed on top of the wall instead.
if collision_point( x + sprite_width/2, y + sprite_height + ySpeed + fallSpeed, oWall, false, true ) and ySpeed &gt; 0
{
    y += (y + sprite_height)%32;
    // If the player just hit the ground this step, then play the landing sound effect.
}

// Checks if the player is inside a wall below them on this step. If they are, then they are placed on top of the wall instead.
if collision_point( x + sprite_width/2, y + sprite_height, oWall, false, true )
{
    y -= (y + sprite_height)%32;
}

// If the player is hit by a floozle, then they are bounced around.
if place_meeting(x, y, oEnemy)
{
        ySpeed = -10;
        xSpeed = otherSpeed * 3;
}
/*
// If the player has ground beneath their feet, then they can use controls.
else if collision_line ( x + sprite_width/2, y + sprite_height + 1, x + sprite_width/2, y + sprite_height + 1, oWall, false, true )
{  
    // Move left
    // If the player is pressing Left then they move left
    if irandom(1) == 0 and !collision_rectangle( x + sprite_width/4, y + (sprite_height/2), x + sprite_width/4, y + (sprite_height/2), oWall, false, true )
    {
        xSpeed = -speedWalk;
        ySpeed = 0;
        // Change the animation and speed it up
        image_speed = imageFast; 
    }
    // Move Right
    // If the player is pressing Right then they move right
    else if !collision_rectangle( x + sprite_width - sprite_width/4, y + (sprite_height/2), x + sprite_width - sprite_width/4, y + (sprite_height/2), oWall, false, true )
    {
        xSpeed = +speedWalk;
        ySpeed = 0;
        // Change the animation and speed it up
        image_speed = imageFast; 
    }
}
*/

// If the NPC is on the ground then they do not fall.
else if collision_line (x + sprite_width/2, y + sprite_height + 1, x + sprite_width/2, y + sprite_height + 1, oWall, false, true)
{
    ySpeed = 0;
    // If the NPC is near an edge then they turn around.
    if !collision_line (x + sprite_width/2 + xSpeed*2,  y + sprite_height/2 + ySpeed, x + sprite_width/2 + xSpeed*2, y + sprite_height*2 + ySpeed, oWall, false, true)
    {
        xSpeed = -xSpeed;
    }
}

// If the player does not have any ground under their feet then they start falling
else if (ySpeed &lt; 8)
{
    ySpeed += fallSpeed;
    
    // Change the animation to the falling animation and speed it up
    image_speed = imageFast;
}    

// Once the player's input and falling status are determined, move the player horizontally and vertically a distance equal to the player's velocity.
x += xSpeed;
y += ySpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>otherSpeed = other.hspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>13,13</point>
  </PhysicsShapePoints>
</object>
